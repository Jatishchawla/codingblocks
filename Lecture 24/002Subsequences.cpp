/*

Given a string of length n, generate all of its subsequences.

A subsequence of a given string (sequence) is a string (sequence) that is generated by
removing zero or more characters from the given string (sequence) without changing its
order.

Example

	Input : inp[] = "abc"
	Output: ["", "c", "b", "bc", "a", "ac", "ab", "abc"]

Constraints

  1 < n < 10

*/

#include<iostream>
#include<set>

using namespace std;

// set<string> s;

// void f(char* inp, char* out, int i, int j) {

// 	// base case
// 	if (inp[i] == '\0') {
// 		out[j] = '\0';
// 		// cout << out << endl;
// 		s.insert(string(out));
// 		return;
// 	}

// 	// recursive case

// 	// take decisions for the remaining characters starting at the ith index

// 	// or generate the subsequences for the inp[i...n-1]

// 	// take a decision for the char. at the ith index of inp[]

// 	// 1. include inp[i] to the out[]
// 	out[j] = inp[i];
// 	f(inp, out, i + 1, j + 1);

// 	// 2. exclude inp[i] from the out[]
// 	f(inp, out, i + 1, j);

// }

// int main() {

// 	char inp[] = "abc";
// 	char out[10];

// 	f(inp, out, 0, 0);

// 	for (string subseq : s) {
// 		cout << subseq << endl;
// 	}


// 	return 0;
// }

void f(char* inp, char* out, int i, int j, set<string>& s) {

	// base case
	if (inp[i] == '\0') {
		out[j] = '\0';
		// cout << out << endl;
		s.insert(string(out));
		return;
	}

	// recursive case

	// take decisions for the remaining characters starting at the ith index

	// or generate the subsequences for the inp[i...n-1]

	// take a decision for the char. at the ith index of inp[]

	// 1. include inp[i] to the out[]
	out[j] = inp[i];
	j++;
	f(inp, out, i + 1, j, s);
	j--; //backtracking step

	// 2. exclude inp[i] from the out[]
	f(inp, out, i + 1, j, s);

}

int main() {

	char inp[] = "abc";
	char out[10];

	set<string> s;

	f(inp, out, 0, 0, s);

	for (string subseq : s) {
		cout << subseq << endl;
	}


	return 0;
}

